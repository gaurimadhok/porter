# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger: none
pr: 
  - main
  - release-*

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOVERSION: '1.13.10'

jobs:
- job: setup
  steps:
  - script: ./build/doc-only-build.sh
    name: BUILD
    displayName: 'Check Doc Only Build'

- job: integration_test
  dependsOn: setup
  condition: eq(dependencies.setup.outputs['BUILD.DOCS_ONLY'], 'false')
  steps:
  - task: GoTool@0
    inputs:
      version: '$(GOVERSION)'
  - script: build/azure-pipelines.setup-go-workspace.sh
    displayName: 'Set up the Go workspace'

  - task: Docker@1
    displayName: Docker Login
    inputs:
      containerRegistryType: Container Registry
      dockerRegistryEndpoint: getporter-registry
      command: login

  - task: DownloadSecureFile@1
    displayName: Download Kubeconfig
    inputs:
      secureFile: kubeconfig

  - script: |
      make build
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Build'

  - script: |
      export KUBECONFIG=$DOWNLOADSECUREFILE_SECUREFILEPATH
      make test-integration
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Integration Test'

- job: cli_test
  dependsOn: setup
  condition: eq(dependencies.setup.outputs['BUILD.DOCS_ONLY'], 'false')
  steps:
  - task: GoTool@0
    inputs:
      version: '$(GOVERSION)'
  - script: build/azure-pipelines.setup-go-workspace.sh
    displayName: 'Set up the Go workspace'

  - task: Docker@1
    displayName: Docker Login
    inputs:
      containerRegistryType: Container Registry
      dockerRegistryEndpoint: getporter-registry
      command: login

  - task: DownloadSecureFile@1
    displayName: Download Kubeconfig
    inputs:
      secureFile: kubeconfig

  - script: |
       make build
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Build'

  - script: |
      export KUBECONFIG=$DOWNLOADSECUREFILE_SECUREFILEPATH
      REGISTRY=getporterci make test-cli
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'CLI Test'
