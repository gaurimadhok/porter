# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    include:
      - refs/heads/main
      - refs/tags/*

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOVERSION: '1.13.10'

stages:
- stage: Test
  jobs:
  - job: unit_test
    steps:
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
    - script: build/azure-pipelines.setup-go-workspace.sh
      displayName: 'Set up the Go workspace'

    - script: make verify
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Verify'

    - script: make test-unit
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Unit Test'

  - job: integration_test
    steps:
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
    - script: build/azure-pipelines.setup-go-workspace.sh
      displayName: 'Set up the Go workspace'

    - task: Docker@1
      displayName: Docker Login
      inputs:
        containerRegistryType: Container Registry
        dockerRegistryEndpoint: getporter-registry
        command: login

    - task: DownloadSecureFile@1
      displayName: Download Kubeconfig
      inputs:
        secureFile: kubeconfig

    - script: |
        export KUBECONFIG=$DOWNLOADSECUREFILE_SECUREFILEPATH
        make test-integration
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Integration Test'

  - job: cli_test
    steps:
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
    - script: build/azure-pipelines.setup-go-workspace.sh
      displayName: 'Set up the Go workspace'

    - task: Docker@1
      displayName: Docker Login
      inputs:
        containerRegistryType: Container Registry
        dockerRegistryEndpoint: getporter-registry
        command: login

    - task: DownloadSecureFile@1
      displayName: Download Kubeconfig
      inputs:
        secureFile: kubeconfig

    - script: make build
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Build'

    - script: |
        export KUBECONFIG=$DOWNLOADSECUREFILE_SECUREFILEPATH
        export REGISTRY=getporterci
        make test-cli
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'CLI Test'

- stage: Publish
  jobs:
  - job: publish_binaries
    steps:
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
    - script: build/azure-pipelines.setup-go-workspace.sh
      displayName: 'Set up the Go workspace'
    
    # Don't combine with the next step, it messes up the templates in the binaries
    - script: make build
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Get yourself a porter'

    - script: make xbuild-all
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Cross Compile'

    - task: Docker@1
      displayName: Docker Login
      inputs:
        containerRegistryType: Container Registry
        dockerRegistryEndpoint: getporter-registry
        command: login

    - script: |
        export AZURE_STORAGE_CONNECTION_STRING=$(AZURE_STORAGE_CONNECTION_STRING)
        make publish
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Publish Porter Binaries'

  - job: publish_example_bundles
    steps:
    - task: GoTool@0
      inputs:
        version: '$(GOVERSION)'
    - script: build/azure-pipelines.setup-go-workspace.sh
      displayName: 'Set up the Go workspace'

    - script: |
        sudo make ajv
        make build build-bundle validate-bundle
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Validate Example Bundles'

    - task: Docker@1
      displayName: Docker Login
      inputs:
        containerRegistryType: Container Registry
        dockerRegistryEndpoint: getporter-registry
        command: login

    - script: make publish-bundle
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Publish Example Bundles'
